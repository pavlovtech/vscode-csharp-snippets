{
	"Console.WriteLine": {
		"prefix": "console-write-line",
		"body": [
			"Console.WriteLine($\"${1:text}\");$0"
		]
	},
	"Create record": {
		"prefix": "record",
		"body": [
			"public record ${1:RecordName}(string ${2:PropertyName});$0"
		]
	},
	"Copy record": {
		"prefix": "copy-record",
		"body": [
			"var ${1:newRecord} = ${2:oldRecordName} with { Prop = \"NewValue\" };$0"
		]
	},
	"Create async enumerable": {
		"prefix": "async-enumerable",
		"body": [
			"private static async IAsyncEnumerable<${1:string}> GetData()",
			"{",
			"\tforeach (var item in ${2:items})",
			"\t\tyield return item;",
			"}"
		]
	},
	"Create dicionary": {
		"prefix": "dictionary",
		"body": [
			"Dictionary<${1:string}, ${2:string}> ${3:dict} = new();$0"
		]
	},
	"Create concurrent dicionary": {
		"prefix": "concurrent-dictionary",
		"body": [
			"ConcurrentDictionary<${1:string}, ${2:string}> ${3:dict} = new();$0"
		]
	},
	"Create concurrent queue": {
		"prefix": "concurrent-queue",
		"body": [
			"ConcurrentQueue<${1:string}> ${2:queue} { get; set; } = new();$0"
		]
	},
	"Create concurrent stack": {
		"prefix": "concurrent-stack",
		"body": [
			"ConcurrentStack<${1:string}> stack = new();$0"
		]
	},
	"Create concurrent bag": {
		"prefix": "concurrent-bag",
		"body": [
			"ConcurrentBag<${1:string}> bag = new();$0"
		]
	},
	"Create immutable queue": {
		"prefix": "immutable-queue",
		"body": [
			"var ${1:queue} = ImmutableQueue.Create<${2:string}>();$0"
		]
	},
	"Create immutable list": {
		"prefix": "immutable-list",
		"body": [
			"var ${1:list} = ImmutableList.Create<${2:string}>();$0"
		]
	},
	"Create immutable dictionary": {
		"prefix": "immutable-dictionary",
		"body": [
			"var ${1:dict} = ImmutableDictionary.Create<${2:string}>();$0"
		]
	},
	"Delete file": {
		"prefix": "delete-file",
		"body": [
			"File.Delete(${1:filePath});$0"
		]
	},
	"Save to file": {
		"prefix": "file-save",
		"body": [
			"await File.AppendAllTextAsync(${1:filePath}, \"${2:content}\");$0"
		]
	},
	"Join strings": {
		"prefix": "join-strings",
		"body": [
			"var joined = string.Join(\",\", ${1:stringList});$0"
		]
	},
	"Throw if null": {
		"prefix": "throw-if-null",
		"body": [
			"ArgumentNullException.ThrowIfNull(${1:arg});$0"
		]
	},
	"Log information": {
		"prefix": "log-info",
		"body": [
			"logger.LogInformation(\"${1:Message about} {arg}\", ${2:arg});$0"
		]
	},
	"Create HttpClient with Get": {
        "prefix": "httpclient-get",
        "body": [
            "var client = new HttpClient();",
            "var response = await client.GetAsync(\"http://www.google.com/\");",
            "response.EnsureSuccessStatusCode();",
            "string responseBody = await response.Content.ReadAsStringAsync();"
        ]
    },
	"Create HttpClient With GetString": {
        "prefix": "httpclient-get-string",
        "body": [
            "var client = new HttpClient();",
            "\t\t\tvar response = await client.GetStringAsync(\"http://www.google.com/\");"
        ]
    }
}
